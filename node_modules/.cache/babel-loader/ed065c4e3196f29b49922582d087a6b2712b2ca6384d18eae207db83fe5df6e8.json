{"ast":null,"code":"var _jsxFileName = \"/Users/enobongoffiong/Documents/Quizzical/quizzical/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [categories, setCategories] = useState([]);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const [questionNumber, setQuestionNumber] = useState(\"10\");\n  const [difficulty, setDifficulty] = useState(\"\");\n  const [questionType, setQuestionType] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [questionsList, setQuestionsList] = useState([]);\n  const answersArray = questionsList.map(question => question.correct_answer);\n  function decodeHTML(encodedString) {\n    const parser = new DOMParser();\n    const decodedString = parser.parseFromString(encodedString, \"text/html\").documentElement.textContent;\n    return decodedString;\n  }\n  const [correctAnswers, setCorrectAnswers] = useState([]);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [score, setScore] = useState(0);\n  const [gameId, setGameId] = useState(0);\n  function compareAnswers() {\n    let score = 0;\n    for (let i = 0; i < correctAnswers.length - 1; i++) {\n      if (correctAnswers[i] === selectedAnswers[i]) {\n        score += 1;\n      }\n    }\n    setScore(score);\n    setIsSubmitted(true);\n  }\n  async function fetchData() {\n    try {\n      const response = await fetch('https://opentdb.com/api_category.php');\n      const data = await response.json();\n      const dataArray = data.trivia_categories;\n      setCategories(dataArray);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  }\n  async function getQuestions(link) {\n    try {\n      const response = await fetch(link);\n      const questions = await response.json();\n      const questionsArray = questions.results.map(question => {\n        const answers = [{\n          text: decodeHTML(question.correct_answer),\n          isCorrect: true\n        }, ...question.incorrect_answers.map(answer => ({\n          text: decodeHTML(answer),\n          isCorrect: false\n        }))];\n        const shuffledAnswers = answers.sort(() => Math.random() - 0.5);\n        return {\n          ...question,\n          question: decodeHTML(question.question),\n          correct_answer: decodeHTML(question.correct_answer),\n          shuffledAnswers\n        };\n      });\n      setQuestionsList(questionsArray);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  }\n  function handleGameStarted() {\n    setGameStarted(prevData => !prevData);\n    getQuestions(url);\n  }\n  useEffect(() => {\n    fetchData();\n  }, []);\n  useEffect(() => {\n    const correctArray = questionsList.map(question => question.correct_answer);\n    setCorrectAnswers(correctArray);\n  }, [questionsList]);\n  useEffect(() => {\n    getQuestions(url);\n  }, [gameId]); // This re-fetches questions when gameId changes\n\n  const urlCategory = selectedCategory ? `&category=${selectedCategory}` : \"\";\n  const urlDifficulty = difficulty ? `&difficulty=${difficulty}` : \"\";\n  const urlType = questionType ? `&type=${questionType}` : \"\";\n  const url = `https://opentdb.com/api.php?amount=${questionNumber}${urlCategory}${urlDifficulty}${urlType}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: gameStarted ?\n    /*#__PURE__*/\n    // If gameStarted is true, show quiz page\n    _jsxDEV(\"div\", {\n      className: \"quiz-page\",\n      children: [loading ?\n      /*#__PURE__*/\n      // Show Loading UI if questions are fetching\n      _jsxDEV(\"p\", {\n        className: \"loading-message\",\n        children: \"Loading new questions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }, this) : questionsList.map(questionObject => {\n        const answers = [{\n          text: questionObject.correct_answer,\n          isCorrect: true\n        }, ...questionObject.incorrect_answers.map(answer => ({\n          text: answer,\n          isCorrect: false\n        }))];\n        const shuffledAnswers = answers.sort(() => Math.random() - 0.5);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"question\",\n            children: [`${questionsList.indexOf(questionObject) + 1}.`, \" \", questionObject.question]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 19\n          }, this), questionObject.shuffledAnswers.map(shuffledAnswer => {\n            const isSelected = selectedAnswers[questionsList.indexOf(questionObject)] === shuffledAnswer.text;\n            const isCorrect = correctAnswers[questionsList.indexOf(questionObject)] === shuffledAnswer.text;\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                if (!isSubmitted) {\n                  const updatedArray = [...selectedAnswers];\n                  updatedArray[questionsList.indexOf(questionObject)] = shuffledAnswer.text;\n                  setSelectedAnswers(updatedArray);\n                }\n              },\n              className: `answer-choice ${isSubmitted ? isCorrect ? \"correct\" : isSelected ? \"incorrect\" : \"unselected\" : isSelected ? \"clicked\" : \"\"}`,\n              children: shuffledAnswer.text\n            }, `${questionsList.indexOf(questionObject) + 1}-${shuffledAnswer.text}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 23\n            }, this);\n          })]\n        }, questionObject.question, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 17\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"check-answer-btn-container\",\n        children: [!isSubmitted && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: compareAnswers,\n          className: \"check-answers-btn\",\n          children: \"Check Answers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 30\n        }, this), isSubmitted && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"You got \", score, \"/\", questionNumber, \" answers correct\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 29\n        }, this), isSubmitted && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"check-answers-btn\",\n          onClick: () => {\n            setIsSubmitted(false);\n            setSelectedAnswers([]);\n            setScore(0);\n            setCorrectAnswers([]);\n            setLoading(true); // Show loading before fetching new questions\n\n            setTimeout(() => {\n              setGameId(prev => prev + 1);\n              setLoading(false);\n            }, 4000);\n          },\n          children: \"Play again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 29\n        }, this), isSubmitted && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"check-answers-btn\",\n          onClick: () => {\n            setGameStarted(false); // Go back to menu\n            setIsSubmitted(false);\n          },\n          children: \"Menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // If gameStarted is false, show the menu\n    _jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"header\",\n          children: \"Quizzical\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"subheader\",\n          children: \"Let's get quizzical!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"quiz-options-container category\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"quiz-options-container-header\",\n            children: \"Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container-buttons\",\n            children: [{\n              id: \"\",\n              name: \"Any Category\"\n            }, ...categories].map(category => /*#__PURE__*/_jsxDEV(\"button\", {\n              value: category.id,\n              onClick: () => setSelectedCategory(category.id),\n              className: selectedCategory === category.id ? 'selected' : 'btn-choice',\n              children: category.name\n            }, category.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"quiz-options-container questions\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"quiz-options-container-header\",\n            children: \"Number of Questions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container-buttons\",\n            children: ['10', '20', '30', '40', '50'].map(num => /*#__PURE__*/_jsxDEV(\"button\", {\n              value: num,\n              className: questionNumber === num ? 'selected' : 'btn-choice',\n              onClick: () => setQuestionNumber(num),\n              children: num\n            }, num, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"quiz-options-container difficulty\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"quiz-options-container-header\",\n            children: \"Difficulty\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container-buttons\",\n            children: [\"\", \"easy\", \"medium\", \"hard\"].map(level => /*#__PURE__*/_jsxDEV(\"button\", {\n              value: level,\n              className: difficulty === level ? 'selected' : 'btn-choice',\n              onClick: () => setDifficulty(level),\n              children: level || \"Any Difficulty\"\n            }, level, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"quiz-options-container type\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"quiz-options-container-header\",\n            children: \"Type of Question\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container-buttons\",\n            children: [\"\", \"multiple\", \"boolean\"].map(type => /*#__PURE__*/_jsxDEV(\"button\", {\n              value: type,\n              className: questionType === type ? 'selected' : 'btn-choice',\n              onClick: () => setQuestionType(type),\n              children: type || \"Any type\"\n            }, type, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"start-btn\",\n          onClick: () => {\n            setGameStarted(true);\n            setLoading(true);\n            setTimeout(() => {\n              setGameId(prev => prev + 1);\n              setLoading(false);\n            }, 1000);\n          },\n          children: \"Start quiz\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"3CurRMAjP+fg+Weyb9JUWJKiCUs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","categories","setCategories","gameStarted","setGameStarted","selectedCategory","setSelectedCategory","questionNumber","setQuestionNumber","difficulty","setDifficulty","questionType","setQuestionType","loading","setLoading","questionsList","setQuestionsList","answersArray","map","question","correct_answer","decodeHTML","encodedString","parser","DOMParser","decodedString","parseFromString","documentElement","textContent","correctAnswers","setCorrectAnswers","selectedAnswers","setSelectedAnswers","isSubmitted","setIsSubmitted","score","setScore","gameId","setGameId","compareAnswers","i","length","fetchData","response","fetch","data","json","dataArray","trivia_categories","error","console","getQuestions","link","questions","questionsArray","results","answers","text","isCorrect","incorrect_answers","answer","shuffledAnswers","sort","Math","random","handleGameStarted","prevData","url","correctArray","urlCategory","urlDifficulty","urlType","className","children","fileName","_jsxFileName","lineNumber","columnNumber","questionObject","indexOf","shuffledAnswer","isSelected","onClick","updatedArray","setTimeout","prev","id","name","category","value","num","level","type","_c","$RefreshReg$"],"sources":["/Users/enobongoffiong/Documents/Quizzical/quizzical/src/App.js"],"sourcesContent":["\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\n\nfunction App() {\n\n  const [categories, setCategories] = useState([])\n  const [gameStarted, setGameStarted] = useState(false)\n\n  const [selectedCategory, setSelectedCategory] = useState(\"\")\n  const [questionNumber, setQuestionNumber] = useState(\"10\")\n  const [difficulty, setDifficulty] = useState(\"\")\n  const [questionType, setQuestionType] = useState(\"\")\n\n  const [loading, setLoading] = useState(false);\n\n\n  const [questionsList , setQuestionsList] = useState([])\n  const answersArray = questionsList.map((question)=>(\n      question.correct_answer\n  ))\n  function decodeHTML(encodedString) {\n    const parser = new DOMParser();\n    const decodedString = parser.parseFromString(encodedString, \"text/html\").documentElement.textContent;\n    return decodedString;\n  }\n\n  const [correctAnswers, setCorrectAnswers] = useState([])\n  const [selectedAnswers, setSelectedAnswers]= useState([])\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [score, setScore] = useState(0)\n\n  const [gameId, setGameId] = useState(0);\n\n  function compareAnswers(){ \n    let score = 0\n    for(let i=0; i<correctAnswers.length-1; i++){\n      if(correctAnswers[i]===selectedAnswers[i]){\n        score+=1\n      }\n    }\n    setScore(score)\n    setIsSubmitted(true)\n      \n  }\n\n\n  async function fetchData(){\n    try{\n      const response = await fetch('https://opentdb.com/api_category.php')\n      const data = await response.json()\n      const dataArray = data.trivia_categories\n      setCategories(dataArray)\n    }\n    catch(error){\n      console.error('Error fetching data:', error);\n    }\n  }\n\n\nasync function getQuestions(link){\n        try{\n          const response = await fetch(link)\n        const questions = await response.json()\n        const questionsArray = questions.results.map((question) => {\n          const answers = [\n              { text: decodeHTML(question.correct_answer), isCorrect: true },\n              ...question.incorrect_answers.map((answer) => ({\n                  text: decodeHTML(answer),\n                  isCorrect: false,\n              })),\n          ];\n\n          \n          const shuffledAnswers = answers.sort(() => Math.random() - 0.5);\n\n          return {\n              ...question,\n              question: decodeHTML(question.question),\n              correct_answer: decodeHTML(question.correct_answer),\n              shuffledAnswers, \n          };\n      });\n\n        setQuestionsList(questionsArray);\n        \n       \n      }\n      catch(error){\n        console.error('Error fetching data:', error);\n      } \n}\n\n  function handleGameStarted(){\n    \n    setGameStarted(prevData => !prevData)\n    \n    getQuestions(url)\n  }\n\n  useEffect(() =>{ \n    fetchData()\n  },[])\n\n  useEffect(() => {\n    const correctArray = questionsList.map((question) => question.correct_answer);\n    setCorrectAnswers(correctArray);\n  }, [questionsList]);\n\n  useEffect(() => {\n    getQuestions(url);\n}, [gameId]); // This re-fetches questions when gameId changes\n\n\n  const urlCategory = selectedCategory ? `&category=${selectedCategory}` : \"\"\n  const urlDifficulty = difficulty ? `&difficulty=${difficulty}` : \"\"\n  const urlType = questionType ? `&type=${questionType}` : \"\"\n\n\n const url = `https://opentdb.com/api.php?amount=${questionNumber}${urlCategory}${urlDifficulty}${urlType}`\n\n\n  \n return (\n  <div className=\"App\">\n    {\n      gameStarted ? (  // If gameStarted is true, show quiz page\n        <div className='quiz-page'>\n          {loading ? ( // Show Loading UI if questions are fetching\n            <p className=\"loading-message\">Loading new questions...</p>\n          ) : (\n            questionsList.map((questionObject) => {\n              const answers = [\n                { text: questionObject.correct_answer, isCorrect: true },\n                ...questionObject.incorrect_answers.map((answer) => ({\n                  text: answer,\n                  isCorrect: false,\n                })),\n              ];\n              const shuffledAnswers = answers.sort(() => Math.random() - 0.5);\n\n              return (\n                <div className='question-container' key={questionObject.question}>\n                  <p className='question'>{`${questionsList.indexOf(questionObject) + 1}.`} {questionObject.question}</p>\n                  {questionObject.shuffledAnswers.map((shuffledAnswer) => {\n                    const isSelected = selectedAnswers[questionsList.indexOf(questionObject)] === shuffledAnswer.text;\n                    const isCorrect = correctAnswers[questionsList.indexOf(questionObject)] === shuffledAnswer.text;\n                    return (\n                      <button \n                        key={`${questionsList.indexOf(questionObject) + 1}-${shuffledAnswer.text}`}\n                        onClick={() => {\n                          if (!isSubmitted) {\n                            const updatedArray = [...selectedAnswers];\n                            updatedArray[questionsList.indexOf(questionObject)] = shuffledAnswer.text;\n                            setSelectedAnswers(updatedArray);\n                          }\n                        }}\n                        className={`answer-choice ${\n                          isSubmitted\n                            ? isCorrect\n                              ? \"correct\"\n                              : isSelected\n                              ? \"incorrect\"\n                              : \"unselected\"\n                            : isSelected ? \"clicked\" : \"\"\n                        }`}\n                      >\n                        {shuffledAnswer.text}\n                      </button>\n                    );\n                  })}\n                </div>\n              );\n            })\n          )}\n\n          <div className='check-answer-btn-container'>\n            {!isSubmitted && <button onClick={compareAnswers} className='check-answers-btn'>\n              Check Answers\n            </button>}\n\n            {isSubmitted && <p>You got {score}/{questionNumber} answers correct</p>}\n\n            {isSubmitted && <button className='check-answers-btn' onClick={() => {\n              setIsSubmitted(false);\n              setSelectedAnswers([]);\n              setScore(0);\n              setCorrectAnswers([]);\n              setLoading(true); // Show loading before fetching new questions\n\n              setTimeout(() => {\n                setGameId(prev => prev + 1);\n                setLoading(false);\n              }, 4000);\n            }}>\n              Play again\n            </button>}\n\n            {isSubmitted && <button className='check-answers-btn' onClick={() => {\n              setGameStarted(false);  // Go back to menu\n              setIsSubmitted(false);\n            }}>\n              Menu\n            </button>}\n          </div>\n        </div>\n      ) : (  // If gameStarted is false, show the menu\n        <main>\n          <div className='header-container'>\n            <h1 className='header'>Quizzical</h1>\n            <p className='subheader'>Let's get quizzical!</p>\n          </div>\n\n          <div className='container-container'>\n            <div className='quiz-options-container category'>\n              <h3 className='quiz-options-container-header'>Category</h3>\n              <div className='container-buttons'>\n                {[{ id: \"\", name: \"Any Category\" }, ...categories].map((category) => (\n                  <button \n                    key={category.id}\n                    value={category.id} \n                    onClick={() => setSelectedCategory(category.id)}\n                    className={selectedCategory === category.id ? 'selected' : 'btn-choice'}>\n                    {category.name}\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            <div className='quiz-options-container questions'>\n              <h3 className='quiz-options-container-header'>Number of Questions</h3>\n              <div className='container-buttons'>\n                {['10', '20', '30', '40', '50'].map((num) => (\n                  <button\n                    key={num}\n                    value={num}\n                    className={questionNumber === num ? 'selected' : 'btn-choice'}\n                    onClick={() => setQuestionNumber(num)}\n                  >\n                    {num}\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            <div className='quiz-options-container difficulty'>\n              <h3 className='quiz-options-container-header'>Difficulty</h3>\n              <div className='container-buttons'>\n                {[\"\", \"easy\", \"medium\", \"hard\"].map((level) => (\n                  <button\n                    key={level}\n                    value={level}\n                    className={difficulty === level ? 'selected' : 'btn-choice'}\n                    onClick={() => setDifficulty(level)}>\n                    {level || \"Any Difficulty\"}\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            <div className='quiz-options-container type'>\n              <h3 className='quiz-options-container-header'>Type of Question</h3>\n              <div className='container-buttons'>\n                {[\"\", \"multiple\", \"boolean\"].map((type) => (\n                  <button value={type}\n                    key={type}\n                    className={questionType === type ? 'selected' : 'btn-choice'}\n                    onClick={() => setQuestionType(type)}>\n                    {type || \"Any type\"}\n                  </button>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <div className='button-container'>\n            <button className='start-btn' onClick={() => {\n              setGameStarted(true);\n              setLoading(true);\n              setTimeout(() => {\n                setGameId(prev => prev + 1);\n                setLoading(false);\n              }, 1000);\n            }}>Start quiz</button>\n          </div>\n        </main>\n      )\n    }\n  </div>\n);\n  }\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}