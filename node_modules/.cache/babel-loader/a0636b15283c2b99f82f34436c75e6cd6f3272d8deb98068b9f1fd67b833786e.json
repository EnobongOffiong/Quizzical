{"ast":null,"code":"import _objectSpread from\"/Users/enobongoffiong/Documents/Quizzical/quizzical/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import'./App.css';import React,{useState,useEffect}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[categories,setCategories]=useState([]);const[gameStarted,setGameStarted]=useState(false);const[selectedCategory,setSelectedCategory]=useState(\"\");const[questionNumber,setQuestionNumber]=useState(\"10\");const[difficulty,setDifficulty]=useState(\"\");const[questionType,setQuestionType]=useState(\"\");const[correctAnswers,setcorrectAnswers]=useState([]);const[selectedAnswers,setSelectedAnswers]=useState([]);const[isSubmitted,setIsSubmitted]=useState(false);const[score,setScore]=useState(0);const[loading,setLoading]=useState(false);const[firstClick,setFirstClick]=useState(true);const[questionsList,setQuestionsList]=useState([]);const[isPlayAgainDisabled,setIsPlayAgainDisabled]=useState(false);const[noQuestions,setNoQuestions]=useState(false);const[isStartDisabled,setIsStartDisabled]=useState(false);const[playAgainCountdown,setPlayAgainCountdown]=useState(4);const[startCountdown,setStartCountdown]=useState(4);const answersArray=questionsList.map(question=>question.correct_answer);const urlCategory=selectedCategory?\"&category=\".concat(selectedCategory):\"\";const urlDifficulty=difficulty?\"&difficulty=\".concat(difficulty):\"\";const urlType=questionType?\"&type=\".concat(questionType):\"\";const url=\"https://opentdb.com/api.php?amount=\".concat(questionNumber).concat(urlCategory).concat(urlDifficulty).concat(urlType);const SkeletonLoader=()=>/*#__PURE__*/_jsx(\"div\",{className:\"skeleton-container\",children:[...Array(5)].map((_,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"skeleton-question\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"skeleton-title\"}),/*#__PURE__*/_jsx(\"div\",{className:\"skeleton-option\"}),/*#__PURE__*/_jsx(\"div\",{className:\"skeleton-option\"}),/*#__PURE__*/_jsx(\"div\",{className:\"skeleton-option\"}),/*#__PURE__*/_jsx(\"div\",{className:\"skeleton-option\"})]},index))});function decodeHTML(encodedString){const parser=new DOMParser();const decodedString=parser.parseFromString(encodedString,\"text/html\").documentElement.textContent;return decodedString;}function compareAnswers(){let score=0;for(let i=0;i<correctAnswers.length-1;i++){if(correctAnswers[i]===selectedAnswers[i]){score+=1;}}setScore(score);setIsSubmitted(true);setIsPlayAgainDisabled(true);setTimeout(()=>{setIsPlayAgainDisabled(false);},4000);}function handleMenu(){setGameStarted(false);setIsSubmitted(false);setFirstClick(true);setIsPlayAgainDisabled(true);setIsStartDisabled(true);setTimeout(()=>{setIsPlayAgainDisabled(false);},4000);}async function handlePlayAgain(){setIsPlayAgainDisabled(true);}function handleGameStarted(){if(firstClick){setGameStarted(true);setFirstClick(false);setIsStartDisabled(true);}else{setLoading(true);setTimeout(()=>{setGameStarted(true);setLoading(false);},3000);}}async function fetchData(){try{const response=await fetch('https://opentdb.com/api_category.php');const data=await response.json();const dataArray=data.trivia_categories;setCategories(dataArray);}catch(error){console.error('Error fetching data:',error);}}async function getQuestions(link){try{setLoading(true);setQuestionsList([]);const response=await fetch(link);const questions=await response.json();if(questions.response_code===1){setNoQuestions(true);}else{setNoQuestions(false);}const questionsArray=questions.results.map(question=>{const answers=[{text:decodeHTML(question.correct_answer),isCorrect:true},...question.incorrect_answers.map(answer=>({text:decodeHTML(answer),isCorrect:false}))];const shuffledAnswers=answers.sort(()=>Math.random()-0.5);return _objectSpread(_objectSpread({},question),{},{question:decodeHTML(question.question),correct_answer:decodeHTML(question.correct_answer),shuffledAnswers});});setQuestionsList(questionsArray);setSelectedAnswers(Array(questionsArray.length).fill(null));// Reset selected answers\nsetScore(0);setIsSubmitted(false);}catch(error){console.error('Error fetching data:',error);}finally{setTimeout(()=>setLoading(false),500);}}useEffect(()=>{let timer;if(isPlayAgainDisabled){setPlayAgainCountdown(4);timer=setInterval(()=>{setPlayAgainCountdown(prev=>prev>1?prev-1:0);},1000);setTimeout(()=>{setIsPlayAgainDisabled(false);},4000);}return()=>clearInterval(timer);},[isPlayAgainDisabled]);useEffect(()=>{let timer;if(isStartDisabled){setStartCountdown(4);timer=setInterval(()=>{setStartCountdown(prev=>prev>1?prev-1:0);},1000);setTimeout(()=>{setIsStartDisabled(false);},4000);}return()=>clearInterval(timer);},[isStartDisabled]);async function handlePlayAgain(){setIsPlayAgainDisabled(true);await getQuestions(url);setTimeout(()=>{setIsPlayAgainDisabled(false);},4000);}useEffect(()=>{fetchData();},[]);useEffect(()=>{if(gameStarted){getQuestions(url);}},[gameStarted]);useEffect(()=>{const correctArray=questionsList.map(question=>question.correct_answer);setcorrectAnswers(correctArray);},[questionsList]);return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:gameStarted?noQuestions?/*#__PURE__*/_jsxs(\"section\",{className:\"no-questions\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"no-questions-text\",children:\"There are no questions available for the selected parameters.\"}),/*#__PURE__*/_jsx(\"button\",{className:\"check-answers-btn\",type:\"button\",onClick:handleMenu,children:\"Back to Menu\"})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"quiz-page\",children:[loading?/*#__PURE__*/_jsx(SkeletonLoader,{}):questionsList.map(questionObject=>{const answers=[{text:questionObject.correct_answer,isCorrect:true},...questionObject.incorrect_answers.map(answer=>({text:answer,isCorrect:false}))];const shuffledAnswers=answers.sort(()=>Math.random()-0.5);return/*#__PURE__*/_jsxs(\"div\",{className:\"question-container\",children:[/*#__PURE__*/_jsxs(\"p\",{className:\"question\",children:[\"\".concat(questionsList.indexOf(questionObject)+1,\".\"),\" \",questionObject.question]}),questionObject.shuffledAnswers.map(shuffledAnswer=>{const isSelected=selectedAnswers[questionsList.indexOf(questionObject)]===shuffledAnswer.text;const isCorrect=correctAnswers[questionsList.indexOf(questionObject)]===shuffledAnswer.text;return/*#__PURE__*/_jsx(\"button\",{onClick:()=>{if(!isSubmitted){const updatedArray=[...selectedAnswers];updatedArray[questionsList.indexOf(questionObject)]=shuffledAnswer.text;setSelectedAnswers(updatedArray);}},className:\"answer-choice \".concat(isSubmitted?isCorrect?\"correct\":isSelected?\"incorrect\":\"unselected\":isSelected?\"clicked\":\"\"),children:shuffledAnswer.text},\"\".concat(questionsList.indexOf(questionObject)+1,\"-\").concat(shuffledAnswer.text));})]});}),/*#__PURE__*/_jsxs(\"div\",{className:\"check-answer-btn-container\",children:[!isSubmitted&&/*#__PURE__*/_jsx(\"button\",{onClick:compareAnswers,className:\"check-answers-btn\",children:\"Check Answers\"}),isSubmitted&&/*#__PURE__*/_jsxs(\"p\",{className:\"score-text\",children:[\"You got \",score,\"/10 answers correct\"]}),isSubmitted&&/*#__PURE__*/_jsx(\"button\",{className:\"check-answers-btn play-again\",onClick:()=>{handlePlayAgain();},disabled:isPlayAgainDisabled,children:isPlayAgainDisabled?\"Play again (\".concat(playAgainCountdown,\")\"):'Play again'}),isSubmitted&&/*#__PURE__*/_jsx(\"button\",{className:\"check-answers-btn\",onClick:handleMenu,children:\"Menu\"})]})]}):/*#__PURE__*/_jsxs(\"main\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"header-container\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"header\",children:\"Quizzical\"}),/*#__PURE__*/_jsx(\"p\",{className:\"subheader\",children:\"Let's get quizzical!\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"container-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"quiz-options-container category\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"quiz-options-container-header\",children:\"Category\"}),/*#__PURE__*/_jsx(\"div\",{className:\"container-buttons\",children:[{id:\"\",name:\"Any Category\"},...categories].map(category=>/*#__PURE__*/_jsx(\"button\",{value:category.id,onClick:()=>setSelectedCategory(category.id),className:selectedCategory===category.id?'selected':'btn-choice',children:category.name},category.id))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"quiz-options-container questions\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"quiz-options-container-header\",children:\"Number of Questions\"}),/*#__PURE__*/_jsx(\"div\",{className:\"container-buttons\",children:['10','20','30','40','50'].map(num=>/*#__PURE__*/_jsx(\"button\",{value:num,className:questionNumber===num?'selected':'btn-choice',onClick:()=>setQuestionNumber(num),children:num},num))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"quiz-options-container difficulty\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"quiz-options-container-header\",children:\"Difficulty\"}),/*#__PURE__*/_jsx(\"div\",{className:\"container-buttons\",children:[\"\",\"easy\",\"medium\",\"hard\"].map(level=>/*#__PURE__*/_jsx(\"button\",{value:level,className:difficulty===level?'selected':'btn-choice',onClick:()=>setDifficulty(level),children:level||\"Any Difficulty\"},level))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"quiz-options-container type\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"quiz-options-container-header\",children:\"Type of Question\"}),/*#__PURE__*/_jsx(\"div\",{className:\"container-buttons\",children:[\"\",\"multiple\",\"boolean\"].map(type=>/*#__PURE__*/_jsx(\"button\",{value:type,className:questionType===type?'selected':'btn-choice',onClick:()=>setQuestionType(type),children:type||\"Any type\"},type))})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"button-container\",children:/*#__PURE__*/_jsx(\"button\",{className:\"start-btn\",onClick:handleGameStarted,disabled:isStartDisabled,children:isStartDisabled?\"Start quiz (\".concat(startCountdown,\")\"):'Start quiz'})})]})});}export default App;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","App","categories","setCategories","gameStarted","setGameStarted","selectedCategory","setSelectedCategory","questionNumber","setQuestionNumber","difficulty","setDifficulty","questionType","setQuestionType","correctAnswers","setcorrectAnswers","selectedAnswers","setSelectedAnswers","isSubmitted","setIsSubmitted","score","setScore","loading","setLoading","firstClick","setFirstClick","questionsList","setQuestionsList","isPlayAgainDisabled","setIsPlayAgainDisabled","noQuestions","setNoQuestions","isStartDisabled","setIsStartDisabled","playAgainCountdown","setPlayAgainCountdown","startCountdown","setStartCountdown","answersArray","map","question","correct_answer","urlCategory","concat","urlDifficulty","urlType","url","SkeletonLoader","className","children","Array","_","index","decodeHTML","encodedString","parser","DOMParser","decodedString","parseFromString","documentElement","textContent","compareAnswers","i","length","setTimeout","handleMenu","handlePlayAgain","handleGameStarted","fetchData","response","fetch","data","json","dataArray","trivia_categories","error","console","getQuestions","link","questions","response_code","questionsArray","results","answers","text","isCorrect","incorrect_answers","answer","shuffledAnswers","sort","Math","random","_objectSpread","fill","timer","setInterval","prev","clearInterval","correctArray","type","onClick","questionObject","indexOf","shuffledAnswer","isSelected","updatedArray","disabled","id","name","category","value","num","level"],"sources":["/Users/enobongoffiong/Documents/Quizzical/quizzical/src/App.js"],"sourcesContent":["\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\n\nfunction App() {\n\n  const [categories, setCategories] = useState([])\n  const [gameStarted, setGameStarted] = useState(false)\n  const [selectedCategory, setSelectedCategory] = useState(\"\")\n  const [questionNumber, setQuestionNumber] = useState(\"10\")\n  const [difficulty, setDifficulty] = useState(\"\")\n  const [questionType, setQuestionType] = useState(\"\")\n  const [correctAnswers, setcorrectAnswers] = useState([])\n  const [selectedAnswers, setSelectedAnswers]= useState([])\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [score, setScore] = useState(0)\n  const [loading, setLoading] = useState(false)\n  const [firstClick, setFirstClick] = useState(true);\n  const [questionsList , setQuestionsList] = useState([])\n  const [isPlayAgainDisabled, setIsPlayAgainDisabled] = useState(false);\n  const [noQuestions, setNoQuestions] = useState(false)\n  const [isStartDisabled, setIsStartDisabled] = useState(false);\n  const [playAgainCountdown, setPlayAgainCountdown] = useState(4);\n  const [startCountdown, setStartCountdown] = useState(4);\n  const answersArray = questionsList.map((question)=>(\n      question.correct_answer\n  ))\n\n  const urlCategory = selectedCategory ? `&category=${selectedCategory}` : \"\"\n  const urlDifficulty = difficulty ? `&difficulty=${difficulty}` : \"\"\n  const urlType = questionType ? `&type=${questionType}` : \"\"\n  \n const url = `https://opentdb.com/api.php?amount=${questionNumber}${urlCategory}${urlDifficulty}${urlType}`\n\n const SkeletonLoader = () => (\n  <div className=\"skeleton-container\">\n    {[...Array(5)].map((_, index) => (\n      <div key={index} className=\"skeleton-question\">\n        <div className=\"skeleton-title\"></div>\n        <div className=\"skeleton-option\"></div>\n        <div className=\"skeleton-option\"></div>\n        <div className=\"skeleton-option\"></div>\n        <div className=\"skeleton-option\"></div>\n      </div>\n    ))}\n  </div>\n)\n\n  function decodeHTML(encodedString) {\n    const parser = new DOMParser();\n    const decodedString = parser.parseFromString(encodedString, \"text/html\").documentElement.textContent;\n    return decodedString;\n  }\n\n  function compareAnswers(){ \n    let score = 0\n    for(let i=0; i<correctAnswers.length-1; i++){\n      if(correctAnswers[i]===selectedAnswers[i]){\n        score+=1\n      }\n    }\n    setScore(score)\n    setIsSubmitted(true)\n    setIsPlayAgainDisabled(true);\n\n    setTimeout(() => {\n        setIsPlayAgainDisabled(false);\n    }, 4000);\n      \n  }\n\n  function handleMenu() {\n    setGameStarted(false);\n    setIsSubmitted(false);\n    setFirstClick(true);\n    setIsPlayAgainDisabled(true);\n    setIsStartDisabled(true);\n\n    setTimeout(() => {\n        setIsPlayAgainDisabled(false);\n    }, 4000);\n\n  }\n  async function handlePlayAgain() {\n    setIsPlayAgainDisabled(true);\n  }\n\n  function handleGameStarted(){\n    if (firstClick) {\n      setGameStarted(true);\n      setFirstClick(false);\n      setIsStartDisabled(true);\n    }\n    else{\n      setLoading(true);\n\n      setTimeout(() => {\n        setGameStarted(true);\n        setLoading(false);\n      }, 3000);\n    }\n\n  \n  \n  }\n\n  async function fetchData(){\n    try{\n      const response = await fetch('https://opentdb.com/api_category.php')\n      const data = await response.json()\n      const dataArray = data.trivia_categories\n      setCategories(dataArray)\n      \n    }\n    catch(error){\n      console.error('Error fetching data:', error);\n    }\n\n   \n  }\n\n  async function getQuestions(link){\n        try{\n          setLoading(true);\n          setQuestionsList([])\n          const response = await fetch(link)\n        const questions = await response.json()\n        \n        if(questions.response_code === 1){\n          setNoQuestions(true)\n        }\n        else{\n          setNoQuestions(false)\n        }\n        const questionsArray = questions.results.map((question) => {\n          const answers = [\n              { text: decodeHTML(question.correct_answer), isCorrect: true },\n              ...question.incorrect_answers.map((answer) => ({\n                  text: decodeHTML(answer),\n                  isCorrect: false,\n              })),\n          ];\n\n          const shuffledAnswers = answers.sort(() => Math.random() - 0.5);\n\n          return {\n              ...question,\n              question: decodeHTML(question.question),\n              correct_answer: decodeHTML(question.correct_answer),\n              shuffledAnswers, \n          };\n      });\n\n        setQuestionsList(questionsArray);\n        setSelectedAnswers(Array(questionsArray.length).fill(null)); // Reset selected answers\n        setScore(0)\n        setIsSubmitted(false)\n        \n      }\n      catch(error){\n        console.error('Error fetching data:', error);\n      } \n      finally{\n        setTimeout(() => setLoading(false), 500);\n      }\n  }\n\n  useEffect(() => {\n    let timer;\n    if (isPlayAgainDisabled) {\n      setPlayAgainCountdown(4);\n      timer = setInterval(() => {\n        setPlayAgainCountdown((prev) => (prev > 1 ? prev - 1 : 0));\n      }, 1000);\n      setTimeout(() => {\n        setIsPlayAgainDisabled(false);\n      }, 4000);\n    }\n    return () => clearInterval(timer);\n  }, [isPlayAgainDisabled]);\n\n  useEffect(() => {\n    let timer;\n    if (isStartDisabled) {\n      setStartCountdown(4);\n      timer = setInterval(() => {\n        setStartCountdown((prev) => (prev > 1 ? prev - 1 : 0));\n      }, 1000);\n      setTimeout(() => {\n        setIsStartDisabled(false);\n      }, 4000);\n    }\n    return () => clearInterval(timer);\n  }, [isStartDisabled]);\n\n  async function handlePlayAgain() {\n      setIsPlayAgainDisabled(true); \n      await getQuestions(url); \n  \n      setTimeout(() => {\n          setIsPlayAgainDisabled(false);\n      }, 4000);\n  }\n\n  useEffect(() =>{ \n    fetchData()\n  },[])\n\n  useEffect(() => {\n    if (gameStarted) {\n      getQuestions(url); \n    }\n  }, [gameStarted]);\n\n  useEffect(() => {\n    const correctArray = questionsList.map((question) => question.correct_answer);\n    setcorrectAnswers(correctArray);\n  }, [questionsList]);\n\n  return (\n    <div className=\"App\">\n      \n      {\n        gameStarted ? \n\n        noQuestions ?\n        <section className=\"no-questions\" >\n        <p className=\"no-questions-text\">There are no questions available for the selected parameters.</p>\n        <button \n          className=\"check-answers-btn\" \n          type=\"button\" \n          onClick={handleMenu}\n        >\n          Back to Menu\n        </button>\n      </section>\n           :\n        \n        <div className='quiz-page'>\n          \n          {loading ? <SkeletonLoader /> :\n          questionsList.map((questionObject)=>{\n            const answers = [\n              { text: questionObject.correct_answer, isCorrect: true },\n              ...questionObject.incorrect_answers.map((answer) => (\n                {\n                  text: answer,\n                  isCorrect: false,\n                })),\n            ]\n\n            const shuffledAnswers = answers.sort(() => Math.random() - 0.5);\n\n            return(\n            <div className='question-container'>\n              <p className='question'>{`${questionsList.indexOf(questionObject)+1}.`} {questionObject.question}</p>\n              \n              {\n              questionObject.shuffledAnswers.map((shuffledAnswer) => {\n                const isSelected = selectedAnswers[questionsList.indexOf(questionObject)] === shuffledAnswer.text;\n                const isCorrect = correctAnswers[questionsList.indexOf(questionObject)] === shuffledAnswer.text;\n                return(\n                  <button \n                key={`${questionsList.indexOf(questionObject)+1}-${shuffledAnswer.text}`}\n                onClick={()=>{\n                    if(!isSubmitted){\n                      const updatedArray=[...selectedAnswers]\n                    updatedArray[questionsList.indexOf(questionObject)] = shuffledAnswer.text\n                    setSelectedAnswers(updatedArray)\n                    }\n                }}\n                className={`answer-choice ${\n                  isSubmitted\n                    ? isCorrect\n                      ? \"correct\"\n                      : isSelected\n                      ? \"incorrect\"\n                      : \"unselected\"\n                    : isSelected ? \"clicked\": \"\" }`}\n                >\n                  {shuffledAnswer.text}</button>\n                )\n              })}\n              \n            </div>\n            )\n        })\n          }\n\n          <div className='check-answer-btn-container'>\n          {!isSubmitted && <button onClick={compareAnswers} className='check-answers-btn'>\n              Check Answers\n          </button>}\n\n          {\n            isSubmitted && <p className='score-text'>\n              You got {score}/10 answers correct\n            </p>\n          }\n\n          {\n            isSubmitted && <button \n            className='check-answers-btn play-again' \n            onClick={()=>{handlePlayAgain()}}\n            disabled={isPlayAgainDisabled}\n            >\n            {isPlayAgainDisabled ? `Play again (${playAgainCountdown})` : 'Play again'}\n              </button> \n          }\n          {\n            isSubmitted && <button \n              className='check-answers-btn' \n              onClick={handleMenu}\n              >\n              Menu\n                </button> \n          }\n          </div>\n        </div>\n        \n        :\n\n        <main>\n        <div className='header-container'>\n          <h1 className='header'>Quizzical</h1>\n          <p className='subheader'>Let's get quizzical!</p>\n        </div>\n      \n        <div className='container-container'>\n          <div className='quiz-options-container category'>\n            <h3 className='quiz-options-container-header'>Category</h3>\n            <div className='container-buttons'>\n    \n                {\n                    [{id: \"\", name: \"Any Category\"},...categories].map((category) => (\n                      <button \n                      key = {category.id}\n                      value={category.id} \n                      onClick = {()=>setSelectedCategory(category.id)}\n                      className={selectedCategory === category.id ? 'selected' : 'btn-choice'}>\n                        {category.name }\n                        </button>\n                    ))\n                }\n            </div>\n          </div>\n\n          <div className='quiz-options-container questions'>\n            <h3 className='quiz-options-container-header'>Number of Questions</h3>\n            <div className='container-buttons'>\n            {['10', '20', '30', '40', '50'].map((num) => (\n                    <button\n                      key={num}\n                      value={num}\n                      className={questionNumber === num ? 'selected' : 'btn-choice'}\n                      onClick={() => setQuestionNumber(num)}\n                    >\n                      {num}\n                    </button>\n              )) }\n            </div>\n          \n          </div>\n\n          <div className='quiz-options-container difficulty'>\n            <h3 className='quiz-options-container-header'>Difficulty</h3>\n            <div className='container-buttons'>\n              {\n                [\"\", \"easy\", \"medium\", \"hard\"].map((level)=>\n                (\n                  <button\n                    key={level}\n                    value={level}\n                    className={difficulty === level ? 'selected' : 'btn-choice'}\n                    onClick={()=>setDifficulty(level)}>\n                    {level || \"Any Difficulty\"}\n                  </button>\n                ))\n              }\n            </div>\n            \n          </div>\n\n          <div className='quiz-options-container type'>\n            <h3 className='quiz-options-container-header'>Type of Question</h3>\n            <div className='container-buttons'>\n              {[\"\", \"multiple\", \"boolean\"].map((type)=> (\n                <button value={type}\n                key={type}\n                className= {questionType === type ? 'selected' : 'btn-choice'}\n                onClick={()=> setQuestionType(type)}>\n                  {type || \"Any type\"}\n                  </button>\n              ))\n                  \n            }\n            </div>\n            \n          </div>\n\n          \n        </div>\n        <div className='button-container'>\n            <button \n            className='start-btn' \n            onClick={handleGameStarted} \n            disabled={isStartDisabled} >\n             {isStartDisabled ? `Start quiz (${startCountdown})` : 'Start quiz'}\n              </button>\n        </div>\n        </main>\n  }\n    </div>\n  );\n}\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}